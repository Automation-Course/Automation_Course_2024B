// טעינת תיקיות
#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>


// הגדרות תווים מוזיקליים
#define NOTE_B0 31
#define NOTE_C1 33
#define NOTE_CS1 35
#define NOTE_D1 37
#define NOTE_DS1 39
#define NOTE_E1 41
#define NOTE_F1 44
#define NOTE_FS1 46
#define NOTE_G1 49
#define NOTE_GS1 52
#define NOTE_A1 55
#define NOTE_AS1 58
#define NOTE_B1 62
#define NOTE_C2 65
#define NOTE_CS2 69
#define NOTE_D2 73
#define NOTE_DS2 78
#define NOTE_E2 82
#define NOTE_F2 87
#define NOTE_FS2 93
#define NOTE_G2 98
#define NOTE_GS2 104
#define NOTE_A2 110
#define NOTE_AS2 117
#define NOTE_B2 123
#define NOTE_C3 131
#define NOTE_CS3 139
#define NOTE_D3 147
#define NOTE_DS3 156
#define NOTE_E3 165
#define NOTE_F3 175
#define NOTE_FS3 185
#define NOTE_G3 196
#define NOTE_GS3 208
#define NOTE_A3 220
#define NOTE_AS3 233
#define NOTE_B3 247
#define NOTE_C4 262
#define NOTE_CS4 277
#define NOTE_D4 294
#define NOTE_DS4 311
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_FS4 370
#define NOTE_G4 392
#define NOTE_GS4 415
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_CS5 554
#define NOTE_D5 587
#define NOTE_DS5 622
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_FS5 740
#define NOTE_G5 784
#define NOTE_GS5 831
#define NOTE_A5 880
#define NOTE_AS5 932
#define NOTE_B5 988
#define NOTE_C6 1047
#define NOTE_CS6 1109
#define NOTE_D6 1175
#define NOTE_DS6 1245
#define NOTE_E6 1319
#define NOTE_F6 1397
#define NOTE_FS6 1480
#define NOTE_G6 1568
#define NOTE_GS6 1661
#define NOTE_A6 1760
#define NOTE_AS6 1865
#define NOTE_B6 1976
#define NOTE_C7 2093
#define NOTE_CS7 2217
#define NOTE_D7 2349
#define NOTE_DS7 2489
#define NOTE_E7 2637
#define NOTE_F7 2794
#define NOTE_FS7 2960
#define NOTE_G7 3136
#define NOTE_GS7 3322
#define NOTE_A7 3520
#define NOTE_AS7 3729
#define NOTE_B7 3951
#define NOTE_C8 4186
#define NOTE_CS8 4435
#define NOTE_D8 4699
#define NOTE_DS8 4978



// הגדרות RFID
#define RST_PIN 9
#define SS_PIN 10
MFRC522 mfrc522(SS_PIN, RST_PIN);   // יצירת מופע של MFRC522


// הגדרות LCD
LiquidCrystal_I2C lcd(0x27, 16, 2);


// הגדרות פינים
const int servoPin = 3;    // Servo מחובר לפין 3
const int buzzerPin = 5;   // Buzzer מחובר לפין 5
const int ledPin = 6;      // נורה צהובה מחוברת לפין 6
const int redLedPin = 7;   // נורה אדומה מחוברת לפין 7
const int greenLedPin = 8; // נורה ירוקה מחוברת לפין 8


// אובייקט סרוו
Servo myServo;


void setup() {
  // אתחול RFID
  SPI.begin();
  mfrc522.PCD_Init();


  // אתחול LCD
  lcd.init();
  lcd.backlight();
  lcd.print("System Ready");


  // הגדרת מצבי הפינים
  pinMode(buzzerPin, OUTPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(greenLedPin, OUTPUT);
  pinMode(redLedPin, OUTPUT);


  // חיבור סרוו
  myServo.attach(servoPin);


  // אתחול תקשורת סריאלית
  Serial.begin(9600);
}


void loop() {
  // חיפוש כרטיסים חדשים
  if ( ! mfrc522.PICC_IsNewCardPresent()) {
    return;
  }
  // בחירת כרטיס
  if ( ! mfrc522.PICC_ReadCardSerial()) {
    return;
  }
  // הצגת UID במוניטור הסריאלי
  Serial.print("UID tag :");
  String content = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  content.toUpperCase();
 
  if (content.substring(1) == "2C BE 99 8A") { // כרטיס מורשה מדליק נורה ירוקה
    Serial.println("Authorized access - Green LED");
    digitalWrite(greenLedPin, HIGH);
    delay(1000);
    digitalWrite(greenLedPin, LOW);
    delay(1000);
    activateSystem(); // הפעלת המערכת
  } else if (content.substring(1) == "4A 80 10 B0") { // כרטיס לא מורשה מדליק נורה אדומה
    Serial.println("Access denied - Red LED");
    digitalWrite(redLedPin, HIGH);
    playErrorMelody(); // ניגון מנגינת ERROR
    delay(500);
    digitalWrite(redLedPin, LOW);
    delay(500);
    lcd.clear();
    lcd.print("INVALID CARD");
    delay(1000);
    lcd.clear();
  }
  // עצירת הכרטיס לשחרורו
  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}


void activateSystem() {
  // ניגון מנגינה
  playMelody();
  // פתיחת הדלת (סיבוב סרוו)
  myServo.write(60); // פתיחת הדלת
  delay(1000); // השהייה של 10 שניות בזמן שהמנגינה מתנגנת והדלת פתוחה
  myServo.write(90); // עצירה של תנועת הדלת
  delay(1000); // השהייה של 10 שניות בזמן שהמנגינה מתנגנת והדלת פתוחה
  // הדלקת LED והצגת הודעה
  digitalWrite(ledPin, HIGH);
  lcd.clear();
  lcd.print("WELCOME ORIYA!");
  delay(1000); // השהייה של 10 שניות בזמן שהמנגינה מתנגנת והדלת פתוחה
  playPakmanTheme();   // ניגון המנגינה של "Pakman"
  myServo.write(120); // סגירת הדלת
  delay(1000); // השהייה של 10 שניות בזמן שהמנגינה מתנגנת והדלת פתוחה
  myServo.write(90); // עצירה של תנועת הדלת
  delay(1000); // השהייה של 10 שניות בזמן שהמנגינה מתנגנת והדלת פתוחה
  //digitalWrite(ledPin, LOW); // כיבוי האור
  // lcd.clear();
  // lcd.print("System Ready");
}


void playMelody() {
  // // מנגינת SUCCESS
  int melody[] = {
    NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4
  };
  int noteDurations[] = {
    4, 8, 8, 4, 4, 4, 4, 4
  };
  // ניגון המנגינה
  for (int thisNote = 0; thisNote < 8; thisNote++) {
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(buzzerPin, melody[thisNote], noteDuration);
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    noTone(buzzerPin);
  }
}


void playErrorMelody() {
  // מנגינת ERROR
  int melody[] = {
    NOTE_C4, NOTE_D4, NOTE_E4
  };
  int noteDurations[] = {
    8, 8, 8
  };
  // ניגון מנגינת ERROR
  for (int thisNote = 0; thisNote < 3; thisNote++) {
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(buzzerPin, melody[thisNote], noteDuration);
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    noTone(buzzerPin);
  }
}


void playPakmanTheme() {
  // Pakman main theme melody
  int melody[] = {
    NOTE_B4, NOTE_B5, NOTE_FS5, NOTE_DS5,
    NOTE_B5, NOTE_FS5, NOTE_DS5, NOTE_C5,
    NOTE_C6, NOTE_G6, NOTE_E6, NOTE_C6, NOTE_G6, NOTE_E6,
   
    NOTE_B4, NOTE_B5, NOTE_FS5, NOTE_DS5, NOTE_B5,
    NOTE_FS5, NOTE_DS5, NOTE_DS5, NOTE_E5, NOTE_F5,
    NOTE_F5, NOTE_FS5, NOTE_G5, NOTE_G5, NOTE_GS5, NOTE_A5, NOTE_B5
  };

  int durations[] = {
    16, 16, 16, 16,
    32, 16, 8, 16,
    16, 16, 16, 32, 16, 8,
   
    16, 16, 16, 16, 32,
    16, 8, 32, 32, 32,
    32, 32, 32, 32, 32, 16, 8
  };
 
  // ניגון המנגינה
  int size = sizeof(durations) / sizeof(int);
  for (int note = 0; note < size; note++) {
    int duration = (1000 / durations[note]) * 1.5;
    tone(buzzerPin, melody[note], duration);

    int pauseBetweenNotes = duration * 1.50;
    delay(pauseBetweenNotes);

    //stop the tone playing:
    noTone(buzzerPin);
  }
}
